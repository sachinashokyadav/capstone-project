pipeline {
    agent any

    environment {
        AWS_REGION       = "ap-south-1"
        AWS_ACCOUNT_ID   = "688372068524"
        ECR_REPO         = "capstoneproject/docker-images"
        ECR_URI          = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
        SONARQUBE_SERVER = "SonarQubeServer"
        SONARQUBE_SCANNER = "SonarQubeScanner"

        // Fix network timeouts during Docker push
        DOCKER_CLIENT_TIMEOUT = '300'
        COMPOSE_HTTP_TIMEOUT  = '300'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Code Quality Analysis (SonarQube)') {
            steps {
                script {
                    echo "üîé Running SonarQube Code Analysis..."
                    def scannerHome = tool name: "${SONARQUBE_SCANNER}", type: 'hudson.plugins.sonar.SonarRunnerInstallation'

                    withSonarQubeEnv("${SONARQUBE_SERVER}") {
                        sh """
                            cd ${WORKSPACE}/Application-Code/backend
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=backend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONAR_AUTH_TOKEN \
                                -Dsonar.projectName="Backend Analysis"

                            cd ${WORKSPACE}/Application-Code/frontend
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=frontend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=$SONAR_HOST_URL \
                                -Dsonar.login=$SONAR_AUTH_TOKEN \
                                -Dsonar.projectName="Frontend Analysis"
                        """
                    }
                }
            }
        }

        stage('Dependency Check') {
            steps {
                script {
                    echo "üîç Running OWASP Dependency Check..."
                    sh '''
                        apt-get update -y && apt-get install -y wget unzip default-jre-headless

                        mkdir -p /opt/dependency-check
                        cd /opt/dependency-check

                        if [ ! -f dependency-check/bin/dependency-check.sh ]; then
                            echo "Downloading OWASP Dependency Check CLI..."
                            wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
                            unzip -o dependency-check-8.4.0-release.zip
                        fi

                        mkdir -p ${WORKSPACE}/reports

                        echo "Scanning backend dependencies..."
                        cd ${WORKSPACE}/Application-Code/backend
                        /opt/dependency-check/dependency-check/bin/dependency-check.sh \
                            --scan . --format HTML --out ${WORKSPACE}/reports/backend-dependency-report.html || true

                        echo "Scanning frontend dependencies..."
                        cd ${WORKSPACE}/Application-Code/frontend
                        /opt/dependency-check/dependency-check/bin/dependency-check.sh \
                            --scan . --format HTML --out ${WORKSPACE}/reports/frontend-dependency-report.html || true
                    '''
                }
            }
        }

        stage('File Scan') {
            steps {
                script {
                    echo "üßæ Scanning for sensitive files..."
                    sh '''
                        echo "Checking for .env files..."
                        find Application-Code -type f -name ".env" || echo "No .env files found."

                        echo "Checking for AWS access keys..."
                        grep -rnE "AKIA[0-9A-Z]{16}" Application-Code || echo "No AWS keys found."
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    echo "üê≥ Building backend and frontend Docker images for commit: ${GIT_COMMIT}"

                    sh '''
                        cd Application-Code/backend
                        docker build -t ${ECR_URI}:backend-${GIT_COMMIT} .

                        cd ../frontend
                        docker build -t ${ECR_URI}:frontend-${GIT_COMMIT} .

                        echo "üßπ Cleaning up unused Docker resources to save space..."
                        docker system prune -af || true
                    '''
                }
            }
        }

        stage('Image Vulnerability Scan (Trivy)') {
            steps {
                script {
                    echo "üõ°Ô∏è Scanning Docker images with Trivy..."
                    sh '''
                        apt-get update -y && apt-get install -y wget apt-transport-https gnupg lsb-release

                        if ! command -v trivy > /dev/null; then
                            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor -o /usr/share/keyrings/trivy.gpg
                            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/trivy.list
                            apt-get update -y && apt-get install -y trivy
                        fi

                        mkdir -p ${WORKSPACE}/reports

                        echo "Scanning backend image..."
                        trivy image --exit-code 0 --severity HIGH,CRITICAL --format html -o ${WORKSPACE}/reports/backend-trivy-report.html ${ECR_URI}:backend-${GIT_COMMIT} || true

                        echo "Scanning frontend image..."
                        trivy image --exit-code 0 --severity HIGH,CRITICAL --format html -o ${WORKSPACE}/reports/frontend-trivy-report.html ${ECR_URI}:frontend-${GIT_COMMIT} || true
                    '''
                }
            }
        }

        stage('Login to AWS ECR') {
            steps {
                script {
                    echo "üîê Logging in to AWS ECR..."
                    withAWS(region: "${AWS_REGION}", credentials: 'aws-credentials') {
                        sh '''
                            aws ecr get-login-password --region ${AWS_REGION} | \
                            docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        '''
                    }
                }
            }
        }

        stage('Push Docker Images to ECR') {
            steps {
                script {
                    echo "üì§ Pushing Docker images to AWS ECR..."
                    sh '''
                        echo "Pushing backend image..."
                        docker push --max-concurrent-uploads=1 ${ECR_URI}:backend-${GIT_COMMIT} || sleep 30 && docker push --max-concurrent-uploads=1 ${ECR_URI}:backend-${GIT_COMMIT}

                        echo "Pushing frontend image..."
                        docker push --max-concurrent-uploads=1 ${ECR_URI}:frontend-${GIT_COMMIT} || sleep 30 && docker push --max-concurrent-uploads=1 ${ECR_URI}:frontend-${GIT_COMMIT}
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Successfully built, scanned, and pushed Docker images to ECR: ${ECR_URI}"
            cleanWs()
        }
        failure {
            echo "‚ùå Build failed! Check Jenkins console output for details."
        }
    }
}
