pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "688372068524"
        AWS_REGION = "ap-south-1"
        ECR_REPO = "capstoneproject/docker-images"
        KUBE_NAMESPACE = "capstone"
        FRONTEND_TAG = ""
        BACKEND_TAG = ""
        EC2_HOST = "ubuntu@3.110.132.71"   // üëà Replace with your EC2 instance public IP
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Fetch Image Tags from AWS ECR') {
            steps {
                script {
                    echo "Fetching latest FRONTEND and BACKEND image tags from AWS ECR..."

                    FRONTEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^frontend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    BACKEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^backend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ Frontend Tag: ${FRONTEND_TAG}"
                    echo "‚úÖ Backend Tag: ${BACKEND_TAG}"
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    echo "üìù Updating image tags in deployment YAMLs..."
                    sh """
                        sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${FRONTEND_TAG}|g" k8s/frontend-deployment.yaml
                        sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BACKEND_TAG}|g" k8s/backend-deployment.yaml
                    """
                }
            }
        }

        stage('Deploy to Minikube on EC2') {
            steps {
                echo "üöÄ SSH into EC2 and deploy to remote Minikube cluster..."
                sshagent(['ec2-ssh-key']) {   // üëà Add your EC2 SSH key credential ID here
                    sh '''
                        ssh -o StrictHostKeyChecking=no $EC2_HOST << 'EOF'
                            echo "üîë Using kubeconfig on EC2..."
                            export KUBECONFIG=/home/ubuntu/.kube/config

                            echo "üì¶ Creating namespace if not exists..."
                            kubectl get ns capstone || kubectl create ns capstone

                            echo "üöÄ Applying manifests..."
                            cd /home/ubuntu/capstone-project
                            kubectl apply -f k8s/backend-deployment.yaml -n capstone
                            kubectl apply -f k8s/frontend-deployment.yaml -n capstone

                            echo "‚è≥ Waiting for rollout..."
                            kubectl rollout status deployment/backend-deployment -n capstone || true
                            kubectl rollout status deployment/frontend-deployment -n capstone || true

                            echo "‚úÖ Deployment completed successfully on Minikube EC2!"
                        EOF
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful! App deployed using latest scanned images."
        }
        failure {
            echo "‚ùå Deployment failed. Check Jenkins logs for details."
        }
    }
}
