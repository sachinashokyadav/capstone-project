pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "688372068524"
        AWS_REGION = "ap-south-1"
        ECR_REPO = "capstoneproject/docker-images"
        KUBE_NAMESPACE = "capstone"
        FRONTEND_TAG = ""
        BACKEND_TAG = ""
        CLUSTER_NAME = "march-2025-eks"       // ‚úÖ your EKS cluster name
        KUBECONFIG_PATH = "${WORKSPACE}/kubeconfig"
        K8S_DIR = "${WORKSPACE}/k8s"          // ‚úÖ Path where deployment YAMLs are located
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Configure AWS CLI & Kubeconfig') {
            steps {
                script {
                    echo "‚öôÔ∏è Configuring AWS CLI and EKS kubeconfig..."

                    sh """
                        aws configure set region ${AWS_REGION}
                        aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME} --kubeconfig ${KUBECONFIG_PATH}
                    """
                }
            }
        }

        stage('Fetch Latest Image Tags from AWS ECR') {
            steps {
                script {
                    echo "üîç Fetching latest image tags from ECR..."

                    FRONTEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^frontend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    BACKEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^backend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ FRONTEND_TAG: ${FRONTEND_TAG}"
                    echo "‚úÖ BACKEND_TAG: ${BACKEND_TAG}"
                }
            }
        }

        stage('Deploy to AWS EKS') {
            steps {
                script {
                    echo "üöÄ Deploying new images to AWS EKS cluster..."

                    sh """
                        export KUBECONFIG=${KUBECONFIG_PATH}

                        echo "üìù Updating image tags in manifests..."
                        sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${FRONTEND_TAG}|g" ${K8S_DIR}/frontend-deployment.yaml
                        sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BACKEND_TAG}|g" ${K8S_DIR}/backend-deployment.yaml

                        echo "üì¶ Applying manifests..."
                        kubectl apply -f ${K8S_DIR}/backend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl apply -f ${K8S_DIR}/frontend-deployment.yaml -n ${KUBE_NAMESPACE}

                        echo "‚è≥ Waiting for rollout..."
                        kubectl rollout status deployment/backend-deployment -n ${KUBE_NAMESPACE} || true
                        kubectl rollout status deployment/frontend-deployment -n ${KUBE_NAMESPACE} || true

                        echo "‚úÖ Deployment completed successfully on AWS EKS!"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful! Latest Docker images deployed to AWS EKS."
        }
        failure {
            echo "‚ùå Deployment failed. Check Jenkins logs for details."
        }
    }
}
