pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "688372068524"
        AWS_REGION = "ap-south-1"
        ECR_REPO = "capstoneproject/docker-images"
        KUBE_NAMESPACE = "capstone"
        FRONTEND_TAG = ""
        BACKEND_TAG = ""
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Fetch Image Tags from AWS ECR') {
            steps {
                script {
                    echo "Fetching latest FRONTEND and BACKEND image tags from AWS ECR..."

                    FRONTEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^frontend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    BACKEND_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query "sort_by(imageDetails,& imagePushedAt)[*].imageTags[]" \
                                --output text | tr '\\t' '\\n' | grep '^backend-' | tail -n 1
                        """,
                        returnStdout: true
                    ).trim()

                    echo "‚úÖ Frontend Tag: ${FRONTEND_TAG}"
                    echo "‚úÖ Backend Tag: ${BACKEND_TAG}"
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    echo "üìù Updating image tags in deployment YAMLs..."
                    sh """
                        sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${FRONTEND_TAG}|g" k8s/frontend-deployment.yaml
                        sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${BACKEND_TAG}|g" k8s/backend-deployment.yaml
                    """
                }
            }
        }

        stage('Deploy to Minikube') {
    steps {
        echo "üöÄ Deploying to remote Minikube cluster on AWS EC2..."
        withCredentials([file(credentialsId: 'minikube-kubeconfig', variable: 'KUBECONFIG_FILE')]) {
            sh '''
                # Use EC2 Minikube kubeconfig
                export KUBECONFIG=$KUBECONFIG_FILE
                
                # Test connection
                kubectl get nodes
                
                # Create namespace if not exists
                kubectl get ns capstone || kubectl create ns capstone
                
                # Deploy backend and frontend
                kubectl apply -f k8s/backend-deployment.yaml -n capstone
                kubectl apply -f k8s/frontend-deployment.yaml -n capstone
                
                # Show rollout status
                kubectl rollout status deployment/backend-deployment -n capstone || true
                kubectl rollout status deployment/frontend-deployment -n capstone || true
            '''
        }
    }
}
        
        /*stage('Deploy to Minikube') {
            steps {
               script {
                    // Ensure kubectl is installed if missing
                   sh '''
                        if ! command -v kubectl &> /dev/null
                        then
                            echo "Installing kubectl..."
                            curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s \
                            https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            mv kubectl /usr/local/bin/
                        fi
                    '''
                    echo "üöÄ Deploying to Minikube..."
                    sh """
                        kubectl config use-context minikube
                        kubectl apply -f k8s/backend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl apply -f k8s/frontend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/backend-deployment -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/frontend-deployment -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }*/
    } 

    post {
        success {
            echo "‚úÖ Deployment successful! App deployed using latest scanned images."
        }
        failure {
            echo "‚ùå Deployment failed. Check Jenkins logs for details."
        }
    }
}
