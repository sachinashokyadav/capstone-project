pipeline {
    agent any

    environment {
        AWS_ACCOUNT_ID = "688372068524"
        AWS_REGION = "ap-south-1"
        ECR_REPO = "capstoneproject/docker-images"
        KUBE_NAMESPACE = "capstone"
        IMAGE_TAG = ""
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sachinashokyadav/capstone-project.git'
            }
        }

        stage('Fetch Latest ECR Image Tag') {
            steps {
                script {
                    echo "Fetching latest image tag from AWS ECR..."
                    IMAGE_TAG = sh(
                        script: """
                            aws ecr describe-images \
                                --repository-name ${ECR_REPO} \
                                --region ${AWS_REGION} \
                                --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()
                    echo "Latest ECR Image Tag: ${IMAGE_TAG}"
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    echo "üìù Updating image tags in deployment YAMLs..."
                    sh """
                        sed -i "s|image: .*frontend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:frontend-${IMAGE_TAG}|g" k8s/frontend-deployment.yaml
                        sed -i "s|image: .*backend.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:backend-${IMAGE_TAG}|g" k8s/backend-deployment.yaml
                    """
                }
            }
        }

        stage('Deploy to Minikube') {
            steps {
                script {
                    echo "üöÄ Deploying to Minikube..."
                    sh """
                        kubectl config use-context minikube
                        kubectl apply -f k8s/backend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl apply -f k8s/frontend-deployment.yaml -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/backend-deployment -n ${KUBE_NAMESPACE}
                        kubectl rollout status deployment/frontend-deployment -n ${KUBE_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful! Application deployed using latest scanned image."
        }
        failure {
            echo "‚ùå Deployment failed. Check Jenkins logs and Trivy report for issues."
        }
    }
}
